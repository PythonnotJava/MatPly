//// Created by 20281 on 2024/7/6.//#ifndef MATPLY_MATBOX_H#define MATPLY_MATBOX_H#include <stdio.h>#include <stdlib.h>#include <stdbool.h>#include "Auxiliary.h"#define ROUND "%.5lf\t"  // 输出精度// 矩阵是否为特殊矩阵typedef struct SpecialAttributes{    bool identityMatrix;  // 单位矩阵    bool principalDiagonalMatrix; // 主对角矩阵    bool subdiagonalMatrix; // 副对角矩阵    bool upperTriangularMatrix; // 上三角矩阵    bool lowerTriangularMatrix; // 下三角矩阵    bool singularMatrix; // 奇异矩阵} Spc;typedef struct Matrix{    int row;  // 行    int column;  // 列    Spc * spc;  // 特殊性质    double ** data;  // 值} Matrix;// 创建所有矩阵都拥有的步骤Matrix * __new__(const int row, const int column);// 创建带有数据的矩阵，顺便可以指定特殊属性，如果知道Matrix * __init__(const int row, const int column, double data[][column], Spc * spc);// 可视化矩阵void VisibleMatrix(const Matrix * matrix);// 销毁矩阵void __delete__(Matrix * matrix);// 创建被某个指定值填充的矩阵Matrix * filled(const int row, const int column, const double number);// 0/1矩阵Matrix * zeros(const int row, const int column);Matrix * ones(const int row, const int column);// 打印矩阵有哪些特殊属性void VisibleMatrixSpc(const Matrix * matrix);// 获取某行的数组double * row_(const int row, const Matrix * matrix);// 获取某列的数组double * column_(const int column, const Matrix * matrix);// 获取指定位置double at(const int row, const int column, const Matrix * matrix);// 判断是不是方阵bool isSquare(const Matrix * matrix);#endif //MATPLY_MATBOX_H